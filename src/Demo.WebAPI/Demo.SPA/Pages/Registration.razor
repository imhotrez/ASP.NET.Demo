@page "/registration"
@using Demo.Models.Dto;
@using Demo.SPA.Services
@using System.Threading
@inject IJSRuntime JS;
@inject AuthService authService;
@inject NotificationService notice;
@inject CommonStateService commonStateService;
@inject NavigationManager manager;

<style>
    .displayed {
        display: block;
        margin-left: auto;
        margin-right: auto;
        margin-top: 5%;
    }
</style>
<div >
    <Card Class="displayed" Title="Регистрация" Style="width:350px; vertical-align: center; horiz-align: center; text-align: center" Bordered="true">
        <Body>
        <Form @ref="                    form"
               Model="@registerRequest"
               Layout="@FormLayout.Vertical"
               Loading="loading"
               LabelColSpan="16"
               WrapperColSpan="16">
            <FormItem Label="E-Mail" WrapperColOffset="0" WrapperColSpan="0" Style="margin-top: -10px">
                <Input @bind-Value="@context.Email"/>
            </FormItem>
            <FormItem Label="Пароль" WrapperColOffset="0" WrapperColSpan="0" Style="margin-top: -10px;">
                <InputPassword @bind-Value="@context.Password"/>
            </FormItem>
            <FormItem Label="Подтверждение пароя" WrapperColOffset="0" WrapperColSpan="0" Style="margin-top: -10px; margin-bottom: 35px">
                <InputPassword @bind-Value="@context.PasswordConfirm"/>
            </FormItem>
            <FormItem WrapperColOffset="0" WrapperColSpan="0">
                <Button Type="@ButtonType.Primary" HtmlType="submit" Style="width:300px;" @onclick="@Register">
                    Зарегистрироваться
                </Button>
            </FormItem>
            <FormItem WrapperColOffset="9" WrapperColSpan="1" Style="margin-top: -15px; margin-bottom: -7px">
                <NavLink class="nav-link" href="login">
                    Войти
                </NavLink>
            </FormItem>
        </Form>
        </Body>
    </Card>
</div>


@code
{
    bool loading = false;
    private readonly RegisterRequest registerRequest = new();

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        registerRequest.FingerPrint = await JS.InvokeAsync<string>("initFingerprintJS");
    }

    Form<RegisterRequest> form;

    private async Task Register() {
        if (form.Validate()) {
            loading = true;
            await authService.Register(registerRequest, default(CancellationToken));
            loading = false;
            if (commonStateService.IsLoggedIn) {
                manager.NavigateTo("myphotos");
            }
        }
    }
}